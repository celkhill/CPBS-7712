DBGContigMaker v 0.5 Pseudocode

#Parsing the READS fasta file
For each line in READS.fasta:
    if line starts with >:
        key = line
        value = next line
        reads[key] = value
    endif
endfor

#Generate the histogram of our read lengths
length_histogram = GetHistogram(GetLengths(reads))

if kmersize > min(GetLengths(reads)):
    raise Error kmer size is larger than the smallest read
endif

#Creating the De Bruijn Graph
for each read in reads:
    idx = 0
    previousNode = None
    while idx<len(read)-kmersize+1:
        k-1 mer = read[idx:kmersize+idx-1]
        next k-1 mer = read[idx+1:kmersize+idx]
        if k-1 mer is not in node_table:
            currentNode = CreateGraphNode(k-1 mer)
        else:
            currentNode = node_table[k-1 mer]
        append next k-1 mer to list currentNode.next
        
        if previousNode is not None:
            append previousNode to list currentNode.prev
        previousNode = currentNode
        node_table[k-1 mer] = currentNode
        idx = idx + 1

    if next k-1 mer is not in node_table:
        currentNode = GraphNode(next k-1 mer)
    else:
        currentNode = node_table[next k-1 mer]
    endif
    append previousNode to list currentNode.prev
    node_table[next k-1 mer] = currentNode
endfor

#Generate a histogram of our node degrees in the DBG
node_degree_histogram = GetHistogram(GetDegrees(node_table)) 

#Read in our query sequence
#Parsing the QUERY fasta file
For each line in QUERY.fasta:
    if line starts with >:
        key = line
        value = next line
        query[key] = value
    endif
endfor

#Lets solve!
best solved sequence = empty list
for idx in number of solving iterations:
    if idx > 0:
        reset the node table with all removed edges
    endif

    reset solved sequence as an empty list
    #find the query sequence first
    for each k-1 mer in query:
        if k-1 mer is in node_table:
            append node to solved sequence
        else:
            raise error that query is not found in graph
        endif
        remove edge in node_table between k-1 mer and next k-1 mer
        save removed edge in visited edge list
    endfor

    #extend solution
    for direction in ['forwards', 'reverse']:
        if direction == 'reverse':
            solved sequence = reverse(solved sequence)
        endif

        currentNode = last element in solved sequence

        loop = True
        while loop is True:
            
            #find our next node
            if direction == 'forwards':
                next node options = unique edges in currentNode.next
            elif direction == 'reverse':
                next node options = unique edges in currentNode.prev
            if length of next node options == 1:
                next node = next node options
            elif length of next node options > 1:
                next node degrees = degree of each node in next node options
                if not any next node degrees > 0:
                    next node = random choice of next node options
                else:
                    bridges = where next node degrees == 1
                    if not all bridges:
                        next node = random choice where degree > 1
                    else:
                        next node = random choice of next node options
                    endif
                endif
            else length of next node options == 0:
                next node = False
                loop = False
            endif

            #add the next node to the solved sequence and remove the edge
            if next node is not False:
                remove edge from currentNode and add to currentNode.visited
                append next node to solved sequence
                set current node as next node
            endif
        endwhile
        if direction == 'reverse':
            solved sequence = reverse(solved sequence)
    endfor

    for each node in node_table:
        reset node.visited to node
    endfor

    if length(solved sequence) > length(best solved sequence):
        best solved sequence = solved sequence
    endif
endfor
    
#Time to reconstruct the DNA sequence of the best solved sequence
for each node in solved sequence:
    append first value in node sequence to DNA sequence
endfor
append node sequence[1:end] to DNA sequence


#Generate the output table
for each read in reads:
    for each match of read in DNA sequence:
        sstart = start of DNA sequence match
        send = end of DNA sequence match
        if read match in query sequence:
            qstart = start of query match
            qend = end of query match
        else:
            qstart = Nan
            qend = Nan
        endif
        save to seqid of read, sstart, send, qstart, end to table 
    endfor
endfor

